library(shinydashboard)
source("udfs.R")
source("udfsB.R")
# the IBM NLC
classifier <<- "2373f5x67-nlc-3778"
# ui
header <- dashboardHeader(title = "IBM NLC service integration with R-shiny", titleWidth = "100%")
sidebar <- dashboardSidebar(disable = T)
body <- dashboardBody(
fluidRow(
column(12, align="center", offset = 0,
h3("Enter details about you and your tennis experience.")),
column(2, align="right", offset = 0),
column(8, align="left", offset = 0,
uiOutput("chatO")),
column(2, align="right", offset = 0),
br(),
column(12, align="center", offset = 0,
textInput("txt1", "Input text", width = "67%"),
actionButton("send", "Send")) #,
# # br(),
# column(6, align="center", offset = 0,
#        h3("Your profile:"),
#        DT::dataTableOutput("tbl1")),
# br(),
# column(12, align="center", offset = 0,
#        textOutput("txt.out1"))
),
tags$head(tags$style("#txt1{color: black;
font-size: 24px;
}"
)),
includeCSS("imessage.css"),
includeScript("sendOnEnter.js")
)
### the UI html
ui <- dashboardPage(header, sidebar, body,
tags$head(tags$style(HTML('
/* logo */
.skin-blue .main-header .logo {
background-color: #000000;
}
/* logo when hovered */
.skin-blue .main-header .logo:hover {
background-color: #888888;
}
/* navbar (rest of the header) */
.skin-blue .main-header .navbar {
background-color: #000001;
}
.content-wrapper,
.right-side {
background-color: #ffffff;
}
'))))
## server
server <- function(input, output, session){
session$onSessionEnded(function() {
if(file.exists(session$token)){
file.remove(session$token)
}
})
observe({
btn.val <- input$send
if(btn.val < 1){
# initialize
chatt <- character(0)
writeLines(chatt, session$token)
return()
} else {
output$chatO <- renderUI({
in.txt1 <- isolate(input$txt1)
if(in.txt1 == ""){
return()
} else {
chatt <- readLines(session$token)
chatt <- c(chatt,
as.character(p(in.txt1, align = "left", class = "them")),
# as.character(br()),
as.character(p(watson.nlc.processtextreturnclass(classifier, in.txt1)$class[1],
align = "right", class = "me")))
writeLines(chatt, session$token)
return(HTML(chatt))
}
})
}
})
}
shinyApp(ui, server)
source("udfs.R")
## the very first function to install or load namespaces
load_or_install <- function(func = "", ...){
if(require(package =  func, character.only = T) == FALSE){
install.packages(func, clean = T, ...)
require(package =  func, character.only = T)
} else {
require(package =  func, character.only = T)
}
}
##
load_if_installed
library(shinydashboard)
source("udfsB.R")
source("udfs.R")
# the IBM NLC
classifier <<- "2373f5x67-nlc-3778"
# ui
header <- dashboardHeader(title = "IBM NLC service integration with R-shiny", titleWidth = "100%")
sidebar <- dashboardSidebar(disable = T)
body <- dashboardBody(
fluidRow(
column(12, align="center", offset = 0,
h3("Enter details about you and your tennis experience.")),
column(2, align="right", offset = 0),
column(8, align="left", offset = 0,
uiOutput("chatO")),
column(2, align="right", offset = 0),
br(),
column(12, align="center", offset = 0,
textInput("txt1", "Input text", width = "67%"),
actionButton("send", "Send")) #,
# # br(),
# column(6, align="center", offset = 0,
#        h3("Your profile:"),
#        DT::dataTableOutput("tbl1")),
# br(),
# column(12, align="center", offset = 0,
#        textOutput("txt.out1"))
),
tags$head(tags$style("#txt1{color: black;
font-size: 24px;
}"
)),
includeCSS("imessage.css"),
includeScript("sendOnEnter.js")
)
### the UI html
ui <- dashboardPage(header, sidebar, body,
tags$head(tags$style(HTML('
/* logo */
.skin-blue .main-header .logo {
background-color: #000000;
}
/* logo when hovered */
.skin-blue .main-header .logo:hover {
background-color: #888888;
}
/* navbar (rest of the header) */
.skin-blue .main-header .navbar {
background-color: #000001;
}
.content-wrapper,
.right-side {
background-color: #ffffff;
}
'))))
## server
server <- function(input, output, session){
session$onSessionEnded(function() {
if(file.exists(session$token)){
file.remove(session$token)
}
})
observe({
btn.val <- input$send
if(btn.val < 1){
# initialize
chatt <- character(0)
writeLines(chatt, session$token)
return()
} else {
output$chatO <- renderUI({
in.txt1 <- isolate(input$txt1)
if(in.txt1 == ""){
return()
} else {
chatt <- readLines(session$token)
chatt <- c(chatt,
as.character(p(in.txt1, align = "left", class = "them")),
# as.character(br()),
as.character(p(watson.nlc.processtextreturnclass(classifier, in.txt1)$class[1],
align = "right", class = "me")))
writeLines(chatt, session$token)
return(HTML(chatt))
}
})
}
})
}
shinyApp(ui, server)
load_or_install(RCurl) # install.packages("RCurl") # if the package is not already installed
library(RCurl)
library(shinydashboard)
source("udfsB.R")
source("udfs.R")
# the IBM NLC
classifier <<- "2373f5x67-nlc-3778"
# ui
header <- dashboardHeader(title = "IBM NLC service integration with R-shiny", titleWidth = "100%")
sidebar <- dashboardSidebar(disable = T)
body <- dashboardBody(
fluidRow(
column(12, align="center", offset = 0,
h3("Enter details about you and your tennis experience.")),
column(2, align="right", offset = 0),
column(8, align="left", offset = 0,
uiOutput("chatO")),
column(2, align="right", offset = 0),
br(),
column(12, align="center", offset = 0,
textInput("txt1", "Input text", width = "67%"),
actionButton("send", "Send")) #,
# # br(),
# column(6, align="center", offset = 0,
#        h3("Your profile:"),
#        DT::dataTableOutput("tbl1")),
# br(),
# column(12, align="center", offset = 0,
#        textOutput("txt.out1"))
),
tags$head(tags$style("#txt1{color: black;
font-size: 24px;
}"
)),
includeCSS("imessage.css"),
includeScript("sendOnEnter.js")
)
### the UI html
ui <- dashboardPage(header, sidebar, body,
tags$head(tags$style(HTML('
/* logo */
.skin-blue .main-header .logo {
background-color: #000000;
}
/* logo when hovered */
.skin-blue .main-header .logo:hover {
background-color: #888888;
}
/* navbar (rest of the header) */
.skin-blue .main-header .navbar {
background-color: #000001;
}
.content-wrapper,
.right-side {
background-color: #ffffff;
}
'))))
## server
server <- function(input, output, session){
session$onSessionEnded(function() {
if(file.exists(session$token)){
file.remove(session$token)
}
})
observe({
btn.val <- input$send
if(btn.val < 1){
# initialize
chatt <- character(0)
writeLines(chatt, session$token)
return()
} else {
output$chatO <- renderUI({
in.txt1 <- isolate(input$txt1)
if(in.txt1 == ""){
return()
} else {
chatt <- readLines(session$token)
chatt <- c(chatt,
as.character(p(in.txt1, align = "left", class = "them")),
# as.character(br()),
as.character(p(watson.nlc.processtextreturnclass(classifier, in.txt1)$class[1],
align = "right", class = "me")))
writeLines(chatt, session$token)
return(HTML(chatt))
}
})
}
})
}
shinyApp(ui, server)
library(shiny)
library(shinydashboard)
source("udfsB.R")
source("udfs.R")
# the IBM NLC
classifier <<- "2373f5x67-nlc-3778"
# ui
header <- dashboardHeader(title = "IBM NLC service integration with R-shiny", titleWidth = "100%")
sidebar <- dashboardSidebar(disable = T)
body <- dashboardBody(
fluidRow(
column(12, align="center", offset = 0,
h3("Enter details about you and your tennis experience.")),
column(2, align="right", offset = 0),
column(8, align="left", offset = 0,
uiOutput("chatO")),
column(2, align="right", offset = 0),
br(),
column(12, align="center", offset = 0,
textInput("txt1", "Input text", width = "67%"),
actionButton("send", "Send")) #,
# # br(),
# column(6, align="center", offset = 0,
#        h3("Your profile:"),
#        DT::dataTableOutput("tbl1")),
# br(),
# column(12, align="center", offset = 0,
#        textOutput("txt.out1"))
),
tags$head(tags$style("#txt1{color: black;
font-size: 24px;
}"
)),
includeCSS("imessage.css"),
includeScript("sendOnEnter.js")
)
### the UI html
ui <- dashboardPage(header, sidebar, body,
tags$head(tags$style(HTML('
/* logo */
.skin-blue .main-header .logo {
background-color: #000000;
}
/* logo when hovered */
.skin-blue .main-header .logo:hover {
background-color: #888888;
}
/* navbar (rest of the header) */
.skin-blue .main-header .navbar {
background-color: #000001;
}
.content-wrapper,
.right-side {
background-color: #ffffff;
}
'))))
## server
server <- function(input, output, session){
session$onSessionEnded(function() {
if(file.exists(session$token)){
file.remove(session$token)
}
})
observe({
btn.val <- input$send
if(btn.val < 1){
# initialize
chatt <- character(0)
writeLines(chatt, session$token)
return()
} else {
output$chatO <- renderUI({
in.txt1 <- isolate(input$txt1)
if(in.txt1 == ""){
return()
} else {
chatt <- readLines(session$token)
chatt <- c(chatt,
as.character(p(in.txt1, align = "left", class = "them")),
# as.character(br()),
as.character(p(watson.nlc.processtextreturnclass(classifier, in.txt1)$class[1],
align = "right", class = "me")))
writeLines(chatt, session$token)
return(HTML(chatt))
}
})
}
})
}
shinyApp(ui, server)
